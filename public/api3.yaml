openapi: 3.0.0
servers:
  - url: /api
info:
  title: basejs API
  version: 0.0.1
  description: Documentation of the RESTful API exposed by basejs
security:
  - JWT: []
x-security-role: user
paths:
  /auth/token:
    post:
      tags:
        - Authentication
      description: Create a JWT based on user credentials or a refresh token
      security: []
      x-security-role: ''
      responses:
        '200':
          description: New generated JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                refresh:
                  type: string
        description: User credentials or refresh token
        required: true
  /auth/social/token:
    post:
      tags:
        - Authentication
      description: Create a JWT based on social provider token
      security: []
      x-security-role: ''
      responses:
        '200':
          description: New generated JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - token
              properties:
                provider:
                  type: string
                token:
                  type: string
        description: Social provider and its access token
        required: true
  /users:
    get:
      tags:
        - Users
      description: Get all users
      security:
        - {}
        - JWT: []
      x-security-role: ''
      parameters:
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/skipParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags:
        - Users
      description: Create a user
      security: []
      x-security-role: ''
      responses:
        '201':
          description: New user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to create
        required: true
  '/users/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Users
      description: Get a user by id
      security:
        - {}
        - JWT: []
      x-security-role: ''
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - Users
      description: Update a user by id
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to update
        required: true
  /products:
    get:
      tags:
        - Products
      description: Get all products
      security:
        - {}
        - JWT: []
      x-security-role: ''
      parameters:
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/skipParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags:
        - Products
      description: Create a product
      security:
        - {}
        - JWT: []
      x-security-role: ''
      responses:
        '201':
          description: New product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: Product to create
        required: true
    delete:
      tags:
        - Products
      description: Delete all products
      security:
        - {}
        - JWT: []
      x-security-role: ''
      parameters:
        - $ref: '#/components/parameters/filterParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  '/products/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Products
      description: Get a product by id
      security:
        - {}
        - JWT: []
      x-security-role: ''
      responses:
        '200':
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - Products
      description: Update a product by id
      security:
        - {}
        - JWT: []
      x-security-role: ''
      responses:
        '200':
          description: Updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: Product to update
        required: true
    delete:
      tags:
        - Products
      description: Delete a product by id
      security:
        - {}
        - JWT: []
      x-security-role: ''
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
tags: []
components:
  responses:
    NoContentResponse:
      description: OK
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    idParam:
      name: id
      in: path
      description: id of item
      required: true
      schema:
        type: string
    filterParam:
      name: filter
      in: query
      description: 'Filter by { "field": "value", ... }'
      schema:
        type: string
    sortParam:
      name: sort
      in: query
      description: 'Sort by { "field": "asc/desc", "field": 1/-1, ... }'
      schema:
        type: string
    skipParam:
      name: skip
      in: query
      description: Number of items to skip
      schema:
        type: integer
        minimum: 0
    limitParam:
      name: limit
      in: query
      description: Number of items to return (1 - 100, default is 20)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: Bearer
  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        _id:
          type: string
          readOnly: true
        username:
          type: string
        password:
          type: string
          format: password
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Product:
      type: object
      required:
        - title
        - price
      properties:
        _id:
          type: string
          readOnly: true
        title:
          type: string
        price:
          type: number
    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    Error:
      type: object
      required:
        - statusCode
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
    JWT:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
